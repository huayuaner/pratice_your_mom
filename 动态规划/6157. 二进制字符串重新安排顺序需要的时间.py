# 给你一个二进制字符串 s 。在一秒之中，所有 子字符串 "01" 同时 被替换成 "10" 。这个过程持续进行到没有 "01" 存在。
#
# 请你返回完成这个过程所需要的秒数。
#
#  
#
# 示例 1：
#
# 输入：s = "0110101"
# 输出：4
# 解释：
# 一秒后，s 变成 "1011010" 。
# 再过 1 秒后，s 变成 "1101100" 。
# 第三秒过后，s 变成 "1110100" 。
# 第四秒后，s 变成 "1111000" 。
# 此时没有 "01" 存在，整个过程花费 4 秒。
# 所以我们返回 4 。
# 示例 2：
#
# 输入：s = "11100"
# 输出：0
# 解释：
# s 中没有 "01" 存在，整个过程花费 0 秒。
# 所以我们返回 0 。
class Solution:
    def secondsToRemoveOccurrences(self, s: str) -> int:
        # 前面0的个数决定了至少要几秒
        # 如果堵车了，需要等前面的空0出来，就能继续跑了
        # s[i] == 1
        # f[i]表示 s 的前 i 个字符前部停好要多少秒
        # f[i] = pre0（前面0的个数）
        # f[i] = f[i-1] + 1
        # f[i] = max(pre0, f[i-1]+1)

        # s[i] == 0: f[i] = f[i-1]
        f = pre0 = 0
        for c in s:
            if c == '0':
                pre0 += 1
            elif pre0:f = max(f+1, pre0)
        return f
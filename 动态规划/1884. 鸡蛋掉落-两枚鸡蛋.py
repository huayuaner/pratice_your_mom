# 给你 2 枚相同 的鸡蛋，和一栋从第 1 层到第 n 层共有 n 层楼的建筑。
#
# 已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都 会碎 ，从 f 楼层或比它低 的楼层落下的鸡蛋都 不会碎 。
#
# 每次操作，你可以取一枚 没有碎 的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。
#
# 请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？
#
#  
#
# 示例 1：
#
# 输入：n = 2
# 输出：2
# 解释：我们可以将第一枚鸡蛋从 1 楼扔下，然后将第二枚从 2 楼扔下。
# 如果第一枚鸡蛋碎了，可知 f = 0；
# 如果第二枚鸡蛋碎了，但第一枚没碎，可知 f = 1；
# 否则，当两个鸡蛋都没碎时，可知 f = 2。
# 示例 2：
#
# 输入：n = 100
# 输出：14
# 解释：
# 一种最优的策略是：
# - 将第一枚鸡蛋从 9 楼扔下。如果碎了，那么 f 在 0 和 8 之间。将第二枚从 1 楼扔下，然后每扔一次上一层楼，在 8 次内找到 f 。总操作次数 = 1 + 8 = 9 。
# - 如果第一枚鸡蛋没有碎，那么再把第一枚鸡蛋从 22 层扔下。如果碎了，那么 f 在 9 和 21 之间。将第二枚鸡蛋从 10 楼扔下，然后每扔一次上一层楼，在 12 次内找到 f 。总操作次数 = 2 + 12 = 14 。
# - 如果第一枚鸡蛋没有再次碎掉，则按照类似的方法从 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99 和 100 楼分别扔下第一枚鸡蛋。
# 不管结果如何，最多需要扔 14 次来确定 f 。
import math


class Solution:
    def twoEggDrop(self, n: int) -> int:
        # print(int((sqrt(801))//2))
        # print((sqrt(8*n-1)-1)/2)
        # 思路
        # 假设少次数是x
        # 那么就有第一次从x楼丢下去 碎：从1至(x-1)试x-1次(共x次); 没碎: 由于已经已经试过一次了，第二次从x+(x-1)楼往下丢 碎:从x+1至2x-2 共(x-2)次+第一次和第二次共x次 ；没碎 从x+(x-1)+(x-2)往下丢....
        #  最后会得到 x+(x-1) + (x-2) +...+1 就全部实验完了，这时候的值应该>=n
        # ((x+1)x)//2 >= n
        # x^2 + x - 2n >= 0
        # x >= (sqrt(8n-1)-1) / 2 向上取整
        # return int((sqrt(8*n-1)-1)/2) if (sqrt(8*n-1)-1)%2 ==0 else int((sqrt(8*n-1)-1)/2)+1
        # return math.ceil((math.sqrt(8*n-1)-1)/2)

        # 动态规划
        # dp[0][n] 表示一个鸡蛋 n层楼的情况
        # dp[1][n] 表示两个鸡蛋 n层楼的情况
        dp = [[float('inf') for _ in range(n + 1)] for _ in range(2)]
        dp[0][0] = dp[1][0] = 0
        for j in range(1, n + 1):
            dp[0][j] = j
            # print(dp)
        # 当有两个鸡蛋且有j层楼
        # 第一选择从第k层楼丢下 碎：dp[0][k-1] + 1  没碎: dp[1][j-k]+1 取两者小值
        for j in range(1, n + 1):
            for k in range(1, j + 1):
                dp[1][j] = min(dp[1][j], max(dp[0][k - 1] + 1, dp[1][j - k] + 1))
                # left,right = 1, j
                # while left<right:

                #     mid = left + (right-left)//2
                #     if dp[0][mid-1] < dp[1][j-mid]:
                #         left = mid + 1
                #     else:
                #         right = mid
                # dp[1][j] = max(dp[0][left-1], dp[1][j-left]) + 1

        return dp[1][-1]
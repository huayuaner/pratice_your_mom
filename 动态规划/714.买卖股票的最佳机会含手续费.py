# 给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。
#
# 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
#
# 返回获得利润的最大值。
#
# 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
#
#  
#
# 示例 1：
#
# 输入：prices = [1, 3, 2, 8, 4, 9], fee = 2
# 输出：8
# 解释：能够达到的最大利润:
# 在此处买入 prices[0] = 1
# 在此处卖出 prices[3] = 8
# 在此处买入 prices[4] = 4
# 在此处卖出 prices[5] = 9
# 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8
# 示例 2：
#
# 输入：prices = [1,3,7,5,10,3], fee = 3
# 输出：6

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        # 相比121可以多次卖，但手上只能持有一只

        # 状态 0 cash in hand after selling 卖了股票后钱在手
        # 状态 1 stock in hand 股票在手
        dp = [[0, 0] for _ in range(len(prices))]
        # 第一天买了股票，利润为-price[0]
        # 第一天不可能卖，所以为0
        dp[0][1] = -prices[0] - fee
        for i in range(1, len(prices)):
            # 这一天手上的钱可能是前一天手上的钱或者前一天手上的股票今天卖了的钱

            # 在卖出的时候增加手续费 或 在卖出加手续费
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])  # - fee)

            # 这一天手上的股票可能是前一天手上的股票或者今天刚买的股票
            # 多了一个状态:前一天把股票卖了，钱在手，又再买了股票
            # dp[i][1] = max(dp[i-1][1],-prices[i], dp[i-1][0]-prices[i])
            # 第三项永远大于等于第二项，所以可以删掉

            # 在买入增加手续费 初始化也要减fee
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i] - fee)
        return dp[-1][0]
# 给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​
#
# 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
#
# 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
#
#  
#
# 示例 1:
#
# 输入: prices = [1,2,3,0,2]
# 输出: 3
# 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
# 示例 2:
#
# 输入: prices = [1]
# 输出: 0
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 相比122存在冷冻期
        if not prices:
            return 0

        # 状态 0 cash in hand after selling 卖了股票后手上的钱
        # 状态 1 stock in hand 买了股票后手上的钱
        # 状态 2 freeze 冷冻期 冷冻期手上的钱
        # 状态0   ----->   状态1
        #    \              /
        #     \            /
        #       <- 状态2 <-
        # 状态 1 要进入 状态 0 ，在这里看作 需要先进入冷冻期，变成冷冻期的钱，再变成手上可用的钱，所以dp[i][0] = max(dp[i-1][0], dp[i-1][2])
        dp = [[0, 0, 0] for _ in range(len(prices))]
        # 第一天买了股票，利润为-price[0]
        # 第一天不可能卖，所以为0
        dp[0][1] = -prices[0]
        for i in range(1, len(prices)):
            # 这一天手上的钱可能是前一天手上的钱或者冷冻期，不能买股票
            # 由于状态设置的原因，状态1要变成状态0需要经过冷冻期，因为状态0是可以用来买股票的钱，而状态2是冷冻期的钱，经过了冷冻期，钱流动到可用的状态0上
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][2])

            # 这一天手上的股票可能是前一天手上的股票或者今天刚买的股票
            # 多了一个状态:前一天把股票卖了，钱在手，又再买了股票
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])
            # 昨天把股票卖了，冷冻期手上的钱
            dp[i][2] = dp[i - 1][1] + prices[i]
        return max(dp[-1][0], dp[-1][2])
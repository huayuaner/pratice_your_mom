# 一个合法的括号匹配序列被定义为:
# 1. 空串""是合法的括号序列
# 2. 如果"X"和"Y"是合法的序列,那么"XY"也是一个合法的括号序列
# 3. 如果"X"是一个合法的序列,那么"(X)"也是一个合法的括号序列
# 4. 每个合法的括号序列都可以由上面的规则生成
# 例如"", "()", "()()()", "(()())", "(((()))"都是合法的。
# 从一个字符串S中移除零个或者多个字符得到的序列称为S的子序列。
# 例如"abcde"的子序列有"abe","","abcde"等。
# 定义LCS(S,T)为字符串S和字符串T最长公共子序列的长度,即一个最长的序列W既是S的子序列也是T的子序列的长度。
# 小易给出一个合法的括号匹配序列s,小易希望你能找出具有以下特征的括号序列t:
# 1、t跟s不同,但是长度相同
# 2、t也是一个合法的括号匹配序列
# 3、LCS(s, t)是满足上述两个条件的t中最大的
# 因为这样的t可能存在多个,小易需要你计算出满足条件的t有多少个。
#
# 如样例所示: s = "(())()",跟字符串s长度相同的合法括号匹配序列有:
# "()(())", "((()))", "()()()", "(()())",其中LCS( "(())()", "()(())" )为4,其他三个都为5,所以输出3.

# 思路 最大的括号序列就是n-1
# 所以遍历原序列每个位置，将每个位置插入其他所有位置，查看是否合法即可
def valid(s):
    cnt = 0
    for c in s:
        if c=='(':
            cnt += 1
        else:
            cnt -= 1
        if cnt < 0:return False
    return True # if cnt==0 else False
s = input()
n = len(s)
ans = set()
for i in range(n):
    # 得到去掉i位置的序列
    si = s[:i] + s[i+1:]
    for j in range(n):
        # if i == j:continue
        # tmp = s[j]
        # s[j] = c
        # print(s_tmp)
        # 将i插入这个序列的不同位置
        sj = si[:j] + s[i] + si[j:]
        if valid(sj):
            # print(sj)
            ans.add(sj)
        # s[j] = tmp
print(len(ans)-1)
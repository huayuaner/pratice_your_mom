你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。

为了使收益最大化，矿工需要按以下规则来开采黄金：

每当矿工进入一个单元，就会收集该单元格中的所有黄金。
矿工每次可以从当前位置向上下左右四个方向走。
每个单元格只能被开采（进入）一次。
不得开采（进入）黄金数目为 0 的单元格。
矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。
 

示例 1：

输入：grid = [[0,6,0],[5,8,7],[0,9,0]]
输出：24
解释：
[[0,6,0],
 [5,8,7],
 [0,9,0]]
一种收集最多黄金的路线是：9 -> 8 -> 7。
示例 2：

输入：grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
输出：28
解释：
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
一种收集最多黄金的路线是：1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7。

class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        ans = 0
        def dfs(x, y, gold):
            gold += grid[x][y]
            # nonlocal关键字修饰变量后标识该变量是上一级函数中的局部变量，也就是说这里标注了nonlocal的意思是 ans是上一级函数的ans
            nonlocal ans
            # 更新ans
            ans = max(ans, gold)
            # 记录该点值并将其置0
            tmp = grid[x][y]
            grid[x][y] = 0
            # 广度搜索
            for nx, ny in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:
                if 0<=nx<m and 0<=ny<n and grid[nx][ny]!=0:
                    dfs(nx, ny, gold)
            # 回溯过程中将其恢复
            grid[x][y] = tmp
        for i in range(m):
            for j in range(n):
                if grid[i][j]!=0:
                    # 对每个不等于0的值进行搜索
                    dfs(i, j, 0)
        return ans


